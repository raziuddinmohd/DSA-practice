// See https://aka.ms/new-console-template for more information
using DSA_algorithm.DSA_practice_by_love_babbar.Arrays;
using DSA_algorithm.LinkedList;
using DSA_algorithm.MethodCalls.DSA_practice_by_love_babbar.Arrays.Patterns;

//int[] arr = { 5, 2, 8, 9 };
//int[] result = ReverseOfAnArray.reverseOfAnArray(arr);
Console.WriteLine("Hello, World!");
//Patterns.printPattern1(5);

//Patterns.printPattern1_2(5);
//Patterns.printPattern2(6);
//Patterns.printPattern3(7);
//Patterns.pattern4(7);
//Patterns.patter5(5);
//Patterns.pattern6(9);

//Patterns.pattern7(9);
//Patterns.pattern8(10);
//Patterns.pattern9(4);
//;
//Patterns.pattern10(4);

//Patterns.pattern11(4);
//List<long> rangeSum(List<int> A, List<List<int>> B)
//{
//    List<int> pSum = new List<int>();
//    List<long> resultArray = new List<long>();
//    pSum[0] = A[0];
//    for (int i = 1; i < A.Count; i++)
//    {
//        pSum[i] = pSum[i - 1] + A[i];
//    }
//    int queryLength = B.Count - 1;
//    while (queryLength > 0)
//    {
//        if (B[queryLength][0] >= 0 && B[queryLength][1] < A.Count)
//        {
//            if (B[queryLength][0] == 0)
//            {
//                resultArray.Add(pSum[B[queryLength][1]]);
//            }
//            else
//            {
//                resultArray.Add(pSum[B[queryLength][1]] - pSum[(B[queryLength][0] - 1)]);
//            }
//        }

//        queryLength--;
//    }
//    return resultArray;
//}
//List<int> someArray = new List<int>
//{
//    7, 3, 1, 5, 5, 5, 1, 2, 4, 5
//};
//int
//rangeSum()
//Given an integer array A of size N, find the first repeating element in it.
//We need to find the element that occurs more than once and whose index of the first occurrence is the smallest.
//If there is no repeating element, return -1.
int solveHS(List<int> A)
{
    Dictionary<int, int> numbersHM = new Dictionary<int, int>();
    int repeatedNumber = -1;
    bool found = false;
    for (int i = 0; i < A.Count; i++)
    {
        if (numbersHM.ContainsKey(A[i]))
        {
            numbersHM[A[i]] = numbersHM[A[i]] + 1;
        }
        else
        {
            numbersHM.Add(A[i], 1);
        }
    }
    for (int i = 0; i < A.Count; i++)
    {
        if (numbersHM[A[i]] > 1)
        {
            repeatedNumber = A[i];
            found = true;
        }
        if (found) break;
    }
    return repeatedNumber;
}
List<int> data = new List<int>();
//[10, 5, 3, 4, 3, 5, 6];
data.Add(10);
data.Add(5); data.Add(3); data.Add(4); data.Add(3); data.Add(5); data.Add(6);
//solveHS(data);
//Given two integer arrays, A and B of size N and M, respectively. Your task is to find all the common elements in both the array.

//NOTE:

//Each element in the result should appear as many times as it appears in both arrays.
//The result can be in any order.

List<int> returnCommonEle(List<int> A, List<int> B)
{
    Dictionary<int, int> mergedArray = new Dictionary<int, int>();
    List<int> result = new List<int>();
    //aded all the element of the first list into merged dictionary - with increamented counter
    for (int i = 0; i < A.Count; i++)
    {
        if (mergedArray.ContainsKey(A[i]))
        {
            mergedArray[A[i]] = mergedArray[A[i]] + 1;
        }
        else
        {
            mergedArray.Add(A[i], 1);
        }
    }
    for (int i = 0; i < B.Count; i++)
    {
        if (mergedArray.ContainsKey(B[i]))
        {
            if (mergedArray[B[i]] > 0)
            {

                mergedArray[B[i]] = mergedArray[B[i]] - 1;
                result.Add(B[i]);
            }
        }
        //this below add is not required as it will check the pair(Common) with in itself
        // else
        // {
        //     mergedArray.Add(B[i], 1);
        // }
    }
    return result;
}

int solve()
{
    List<int> A = new List<int>
    {
         -2892, 5148, -6190, 3966, 996, -3497, -2880, 783, 5982, 5405, 9517, 9458, 5188, 1184, 2875, 6116, -9891, -4253, -1333, 1915, 2058, 1647, -3224, -5148, 7820, -9879, -693, 5808, 5620, 7074, 6454, -9249, -5100, -5055, -943, 9105, 3146, -9434, 8641, 3066, -6946, 3874, -6776, -1644, 2486, 2266, -5125, 3221, -3619, -5566, 3217, -9906, -7508, -6257, 6210, 4188, -727, -4398, -8907, -5992, -3649, 44, 9322, -7698, 8524, 8840, -4727, 2077, -944, 8453, 9663, 4734, -478, -4399, 2228, 845, 8463, 3560, -6235, -5085, 5688, 9374, -7241, -1489, -5827, 7861, -5807, 6771, -9662, 6614, 7722, -239, 3523, -1666, -7196, 9175, 5068, -7873, 5979, 7105, -9524, 8359, -4185, -2066, -8825, -8236, 384, -1139, -732, -8474, -9344, -1273, -3333, -7335, -6474, -9874, 2095, -2382, -6021, 3767, 9524, 177, -2102, -748, 8384, 2432, 9842, -1574, -3696, 2779, 1627, 563, 6028, 7541, 41, 6361, 5342, 6238, 5539, 5997, -3222, 6504, 8070, 313, 2880, 388, -1838, -703, 6951, 5878, -9960, -5627, 9264, -5900, -6253, -1528, -8888, 7291, 6255, 9903, -2628, 2818, 7974, 9763, 3638, -1145, -8133, -1923, -6717, 8967, -3976, 9639, 2366, 4353, -97, -7662, 9848, 7419, -4860, -5128, -1296, 3419, -305, -1498, 5672, 1502, 8375, -795, -4311, -3062, -755, -3545, -1509, 3762, 3174, -2473, -231, -3421, 5736, -2538, 6552, 9651, -9453, 7562, 3700, -9534, -169, -553, 1741, -1550, -1641, -8584, -7116, 1047, -2110, 490, 3892, -7016, 7143, 5667, 5971, -1718, -7779, -5976, 8400, -1619, 8898, -1726, 7944, -5882, -6721, -6652, -9326, -1765, 3541, 2507, -6068, 2916, -7680, 8312, -6060, 7750, -2140, -2503, 7248, 6013, -7934, 5926, -1546, -9047, -323, -5033, 4631, -8421, 8221, -1760, 4024, 9562, -3847, 5038, -7319, 1245, -2486, -2559, 5345, 4291, -9248, -7083, -5319, -4400, 2167, -3018, 7730, 5952, 1844, -5307, -7432, -3889, -1403, -6607, 9622, 1745, 7246, 7076, 1501, 4019, 6266, -8373, -1651, 4717, -9970, -2113, 7337, -2764, -235, -7663, 9702, -954, -7553, 6326, -2751, -6938, 5672, -7356, -4202, 6075, -3699, -7614, -1804, -4278, 9811, 2485, 2688, 7674, -2865, -4165, 4470, 4443, -3256, -8269, -1724, -1269, -8155, 7340, 2271, -5885, 5384, 746, 482, -2593, 4584, 3891, -6059, 2764, -1113, -3777, 5381, 9905, -7227, 4354, -2794, -485, 5150, -8440, 9611, -8524, 2822, 6455, -4516, 9802, -5258, -5589, 8290, -3226, -2317, -3337, 8460, -3988, -8786, 8391, 8560, -8522, -2929, -7350, -10000, -6644, 2487, 9128, 1387, -5535, -2863, 1186, 5794, -3405, -1042, 1519, -4013, -4324, 561, 8420, -6794, 8572, 7233, -5277, 7361, -2615, 8592, -7697, -9074, -7403, 8576, -6983, -9754, -2297, 1271, 2859, 6942, -3329, -2183, 1282, 708, 8294, 7673, -4083, 2026, -604, 1702, 4462, -9521, -7183, -4800, -3565, 3626, -7486, 2481, 5728, 4223, -9062, -2549, 8249, -203, 7770, -4907, -3207, 5047, -8765, -3304, -4832, 5709, -7236, -4093, 9512, -4733, 4878, 187, 4566, 104, 2012, -5813, 6403, -3415, -2033, -8487, -2156, 9099, 2870, 6650, 5251, -7561, -8104, -1260, -3859, -8794, 4418, -3726, 1790, -6598, -2431, -3959, 4872, -7310, -1615, 4226, -7550, 107, -246, -7002, -8377, 4871, -4832, 8545, 1015, 8532, -3075, 4054, 7402, -9177, -4563, 5066, 2542, -5262, 9866, -3574, -1851, -1677, 3415, 6556, 1528, 3220, 806, -3178, -9444, 6616, 2619, 9930, -720, 4782, -2951, 4754, 2654, -1112, -6764, -1617, 3771, -6393, -6333, 895, 652, -9680, 609, 8440, -8784, 578, 4069, -9495, 6477, -1093, -4367, -3328, -5930, -9292, -9617, 783, -297, 7478, 7227, -9645, -9704, -6031, 5041, -517, 9046, 4922, 7893, -7238, -4559, 5007, -9338, 8399, 2913, 4959, 6848, 9, 5549, 1538, -3061, -1296, 7782, -4849, -1830, 3451, -5244, 9401, -225, 8923, -7365, -8224, -8925, 2256, 4, 3592, -2186, -7553, 770, -2837, 455
        //-2892, 5148, -6190, 3966, 996, -3497, -2880, 783, 5982, 5405, 9517, 9458, 5188, 1184, 2875, 6116, -9891, -4253, -1333, 1915, 2058, 1647, -3224, -5148, 7820, -9879, -693, 5808, 5620, 7074, 6454, -9249, -5100, -5055, -943, 9105, 3146, -9434, 8641, 3066, -6946, 3874, -6776, -1644, 2486, 2266, -5125, 3221, -3619, -5566, 3217, -9906, -7508, -6257, 6210, 4188, -727, -4398, -8907, -5992, -3649, 44, 9322, -7698, 8524, 8840, -4727, 2077, -944, 8453, 9663, 4734, -478, -4399, 2228, 845, 8463, 3560, -6235, -5085, 5688, 9374, -7241, -1489, -5827, 7861, -5807, 6771, -9662, 6614, 7722, -239, 3523, -1666, -7196, 9175, 5068, -7873, 5979, 7105, -9524, 8359, -4185, -2066, -8825, -8236, 384, -1139, -732, -8474, -9344, -1273, -3333, -7335, -6474, -9874, 2095, -2382, -6021, 3767, 9524, 177, -2102, -748, 8384, 2432, 9842, -1574, -3696, 2779, 1627, 563, 6028, 7541, 41, 6361, 5342, 6238, 5539, 5997, -3222, 6504, 8070, 313, 2880, 388, -1838, -703, 6951, 5878, -9960, -5627, 9264, -5900, -6253, -1528, -8888, 7291, 6255, 9903, -2628, 2818, 7974, 9763, 3638, -1145, -8133, -1923, -6717, 8967, -3976, 9639, 2366, 4353, -97, -7662, 9848, 7419, -4860, -5128, -1296, 3419, -305, -1498, 5672, 1502, 8375, -795, -4311, -3062, -755, -3545, -1509, 3762, 3174, -2473, -231, -3421, 5736, -2538, 6552, 9651, -9453, 7562, 3700, -9534, -169, -553, 1741, -1550, -1641, -8584, -7116, 1047, -2110, 490, 3892, -7016, 7143, 5667, 5971, -1718, -7779, -5976, 8400, -1619, 8898, -1726, 7944, -5882, -6721, -6652, -9326, -1765, 3541, 2507, -6068, 2916, -7680, 8312, -6060, 7750, -2140, -2503, 7248, 6013, -7934, 5926, -1546, -9047, -323, -5033, 4631, -8421, 8221, -1760, 4024, 9562, -3847, 5038, -7319, 1245, -2486, -2559, 5345, 4291, -9248, -7083, -5319, -4400, 2167, -3018, 7730, 5952, 1844, -5307, -7432, -3889, -1403, -6607, 9622, 1745, 7246, 7076, 1501, 4019, 6266, -8373, -1651, 4717, -9970, -2113, 7337, -2764, -235, -7663, 9702, -954, -7553, 6326, -2751, -6938, 5672, -7356, -4202, 6075, -3699, -7614, -1804, -4278, 9811, 2485, 2688, 7674, -2865, -4165, 4470, 4443, -3256, -8269, -1724, -1269, -8155, 7340, 2271, -5885, 5384, 746, 482, -2593, 4584, 3891, -6059, 2764, -1113, -3777, 5381, 9905, -7227, 4354, -2794, -485, 5150, -8440, 9611, -8524, 2822, 6455, -4516, 9802, -5258, -5589, 8290, -3226, -2317, -3337, 8460, -3988, -8786, 8391, 8560, -8522, -2929, -7350, -10000, -6644, 2487, 9128, 1387, -5535, -2863, 1186, 5794, -3405, -1042, 1519, -4013, -4324, 561, 8420, -6794, 8572, 7233, -5277, 7361, -2615, 8592, -7697, -9074, -7403, 8576, -6983, -9754, -2297, 1271, 2859, 6942, -3329, -2183, 1282, 708, 8294, 7673, -4083, 2026, -604, 1702, 4462, -9521, -7183, -4800, -3565, 3626, -7486, 2481, 5728, 4223, -9062, -2549, 8249, -203, 7770, -4907, -3207, 5047, -8765, -3304, -4832, 5709, -7236, -4093, 9512, -4733, 4878, 187, 4566, 104, 2012, -5813, 6403, -3415, -2033, -8487, -2156, 9099, 2870, 6650, 5251, -7561, -8104, -1260, -3859, -8794, 4418, -3726, 1790, -6598, -2431, -3959, 4872, -7310, -1615, 4226, -7550, 107, -246, -7002, -8377, 4871, -4832, 8545, 1015, 8532, -3075, 4054, 7402, -9177, -4563, 5066, 2542, -5262, 9866, -3574, -1851, -1677, 3415, 6556, 1528, 3220, 806, -3178, -9444, 6616, 2619, 9930, -720, 4782, -2951, 4754, 2654, -1112, -6764, -1617, 3771, -6393, -6333, 895, 652, -9680, 609, 8440, -8784, 578, 4069, -9495, 6477, -1093, -4367, -3328, -5930, -9292, -9617, 783, -297, 7478, 7227, -9645, -9704, -6031, 5041, -517, 9046, 4922, 7893, -7238, -4559, 5007, -9338, 8399, 2913, 4959, 6848, 9, 5549, 1538, -3061, -1296, 7782, -4849, -1830, 3451, -5244, 9401, -225, 8923, -7365, -8224, -8925, 2256, 4, 3592, -2186, -7553, 770, -2837, 455
         //1, 2, 3, 7, 1, 2, 3
         //-7, 1, 5, 2, -4, 3, 0
         //-7653, -3893, 2371, 4846, 5531, 7995, -9637, 2740, -5807, -5974, -8040, -5191, 2756, 7044, 1702, 2357, 6428, -3363, -7233, 356, 1161, -6762, 3844, -2591, 1683, -1529, -1485, 5264, 5837, 6942, -2790, 362, -3670, 8013, -882, 1014, 869, -4855, -5179, 2357, -8530, 3458, -3298, 9639, 9387, -3568, -4375, -2076, 6962, 1023, 6093, 7771, -4167, 5472, 710, -1886, -7533, 5588, 1830, -7054, -8271, 7956, 9231, -8723, 133, 5288, -7930, 6596, 9084, 3889, -1322, -9644, -1845, -6600, -3502, -1679, -524, -2646, -7516, 7477, 3345, -9345, 6552, -9659, -8228, 8736, -3801, 2717, -5218, 33, -9392, -737, -343, -5206, -5151, -192, 9857, -7362, 6713, 7524, 1892, 2156, -4224, 8030, -5094, 959, 9250, -4588, -4368, 3531, 5868, -9777, 7064, -5718, 6412, -189, -4323, -5987, 8161, 2709, 7433, 9648, -185, 270, -1299, -1976, -4157, -4372, -7090, -633, -9468, -8274, 9549, -6744, 2385, 8156, 5688, -792, -3338, 2283, 6503, -9786, 3878, 9541, -6152, 3785, 9396, -9695, -6004, 3621, -645, -3609, 2176, 6398, 1248, 2320, -4962, 5011, -8832, 6127, -7635, -6142, -4646, 3047, -2509, -4769, 4140, 5508, 9420, 8120, -2694, 6560, 8398, -100, 5759, 2696, 5696, 7748, -9611, 1007, -5228, 8574, 4507, -1011, 2723, -9726, 179, -2428, 9181, 4898, -8915, 7768, -5208, 8306, -2659, 3844, -661, 8452, 6041, 1380, 7817, 8973, 6751, -4815, 5347, -2711, 188, -5371, -679, -8278, 1903, -5038, -5791, -7893, 6515, -4994, 4527, -2608, -1213, 6028, 8742, -4275, -4817, -6160, 6422, -1766, -8639, 6205, -3150, 4615, 7417, 8710, -6074, -344, 4148, 1425, -632, -9160, 3297, -7114, 5159, 1386, 9770, 2347, -3587, -3875, -2635, 5048, -5901, -7484, 8975, -4308, 161, 299, -4049, -8815, -7762, 7018, -7943, 237, -6695, 7629, -7953, 9459, 4735, -3829, 9727, -6403, 5466, 6218, -5877, 2033, -4857, 1585, 514, -6989, 5236, -9830, -5191, 5947, 2560, -4052, -8077, -1288, 492, -4326, -492, 2294, -4923, -5192, 5162, 3137, 5975, 7399, -5645, 4187, -8523, 3651, -2419, 7813, 6036, -7307, 8254, 7936, -9467, 5581, -3412, 7572, 5229, 101, 1171, 8309, -6208, -8279, 444, -2281, -2046, -8015, 9570, -7134, 4339, 5946, 3592, -3576, -886, -4246, -610, 8529, 114, 6778, -7997, 7117, 7970, -9467, 1722, -1286, 3767, -930, 7682, -3814, -4258, -3810, -8109, -9843, 8266, -732, 6784, -8437, 2357, -4750, -7906, -9440, -4353, -7544, 8803, 5253, 5256, -5497, 8886, 4304, 8080, 908, 6009, 4940, -9357, 3402, -1661, -1435, 5537, -7720, 5460, -872, -1353, -5385, 9094, -4783, 9087, -8572, -1667, 1788, -7608, 2228, 6087, 2984, 7494, -7699, -2480, -3224, -7232, 4543, -6029, -2972, 9430, 8164, 1959, -2684, -2414, -8991, -3467, -4217, -1649, 837, 4336, -2265, -3976, 9518, -734, 4976, 3196, 8596, -6076, -1447, -4851, 4907, -478, -7859, -5003, 8428, -9053, 4681, -795, 3330, 5359, -5970, -220, -7393, 1088, -1559, -9193, 7574, 6186, -9753, -9647, 7090, 443, -4809, 3298, 6116, 2494, 7231, 3493, -6231, -6764, -6311, 5140, 5977, 4169, 5221, 4568, -1875, 7542, 9705, 2771, -718, 3135, 5548, -1085, 3003, -3784, -2730, -6471, 9204, 9575, -8391, -3986, 1410, -5961, 4005, -6029, -6209, 8290, 2692, 3424, 5242, -8314, 4330, -2775, 4755, 8850, 2378, 8147, 5597, 8121, -5413, 7104, 9328, 5535, 0, 9065, -4788, -1505, 2202, -8444, 5989, 7361, 9707, -7802, 3466, -8042, 2077, -8845, -66, -7741, 5097, -268, -4540, -3439, -9265, -2806, 6926, 4592, 3148, -7634, 2777, -9401, -6748, -9755, 7814, -7294, -2509, -820, 338, 7721, 4314, 5798, 5146, -9934, -1057, 8088, 4854, 9482, 719, 7099, -5376, -2543, 587, 2026, -5367, -4480, 2011, -3743, 5779, -9267, -7509, 8485, -666, 1450, -4380, -1108, -2459, -7715, -3057, -1689, 436, 2696, -6039, -1375, -9400, 4052, 5780, 2796, -4295, 3960, 855, 548, -5908, -5673, -8366, 7366, -3138, -3512, 9567, -7559, 9387, -7031, 9293, -4569, -2683, -1176, 7786, -3516, -2594, 4886, 4669, 2079, -6810, -1645, -1342, 3529, 2070, -6946, 6439, 952, -1495, -4243, 8994, -6882
    };
    List<int> pSum = new List<int>();
    pSum.Add(A[0]);
    // pSum[0]=A[0];
    for (int i = 1; i < A.Count; i++)
    {
        pSum.Add(pSum[i - 1] + A[i]);
    }
    int count = 0;
    int totalSum = pSum[A.Count - 1];
    List<int> equiliIndexs = new List<int>();
    for (int i = 0; i < A.Count; i++)
    {
        int leftSum = pSum[i] - A[i];
        int rightSum = totalSum - pSum[i];
        if (leftSum == rightSum)
        {
            equiliIndexs.Add(i);
            count++;
        }
        //if (i == 0)
        //{
        //    if ((pSum[0] == pSum[A.Count - 1]))
        //        count++;
        //}
        //else if (pSum[i - 1] == pSum[A.Count - 1] - pSum[i])
        //{
        //    count++;
        //}
    }
    if (equiliIndexs.Count == 1)
        return equiliIndexs[0];
    else if (equiliIndexs.Count > 1)
        return equiliIndexs.Min();
    else return -1;
    //return equiliIndexs.Count>0? equiliIndexs.Min():-1;
}
solve();
//int countOfPair(List<string> someString)
//{
//    int countOfPair = 0;
//    int pointerOfFirstPair = 0;
//    int lenghtOfAnArray = someString.Count;
//    while (pointerOfFirstPair <= lenghtOfAnArray)
//    {

//        for (int i = pointerOfFirstPair; i < someString.Count - 1; i++)
//        {
//            if (someString[i] == "a")
//            {
//                pointerOfFirstPair = i;
//                break;
//            }
//        }
//        for (int j = pointerOfFirstPair + 1; j < someString.Count; j++)
//        {
//            if (someString[j] == "g")
//            {
//                countOfPair++;
//            }
//        }
//        lenghtOfAnArray--;
//        pointerOfFirstPair++;
//    }
//    return countOfPair;
//}
//int count = countOfPair(new List<string> { "b", "c", "a", "g", "g", "a", "a", "g" });
//Console.WriteLine("count", count);